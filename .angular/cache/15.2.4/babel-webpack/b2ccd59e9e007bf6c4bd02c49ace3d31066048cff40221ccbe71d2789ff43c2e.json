{
  "ast": null,
  "code": "import _asyncToGenerator from \"C:/Users/pineapple/Documents/Actuality/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Comments } from '../comments/comments';\nimport { Likes } from '../likes/likes';\nimport { Users } from '../users/users';\nexport let Posts = /*#__PURE__*/(() => {\n  class Posts {\n    static get(id) {\n      return new Promise((res, rej) => {\n        Posts.api_service.get(`${Posts.get_path}id=${id}`).subscribe({\n          next: e => res(e),\n          error: () => rej([])\n        });\n      });\n    }\n    static getAll() {\n      return new Promise((res, rej) => {\n        Posts.api_service.get(Posts.path).subscribe({\n          next: e => res(e),\n          error: () => rej([])\n        });\n      });\n    }\n    static getLastID() {\n      return new Promise((res, rej) => {\n        Posts.getAll().then(data => {\n          if (data.length == 0) res(0);else res(data[data.length - 1].id);\n        }).catch(() => {\n          rej(0);\n        });\n      });\n    }\n    static getBy(key, data) {\n      return new Promise((res, rej) => {\n        Posts.api_service.get(`${Posts.get_path}${key}=${data}`).subscribe({\n          next: post => res(post),\n          error: () => rej([])\n        });\n      });\n    }\n    static getCPosts(posts) {\n      return new Promise(res => {\n        const users_of_comments = [];\n        const cposts = [];\n        _asyncToGenerator(function* () {\n          for (const post of posts) {\n            const cpost = {};\n            cpost.comments = yield Comments.getBy('id_post', post.id);\n            cpost.likes = yield Likes.getBy('id_post', post.id);\n            cpost.user_of_post = yield Users.get(post.id_user);\n            cpost.comments.forEach( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator(function* (comment) {\n                users_of_comments.push(yield Users.get(comment.id_user));\n              });\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            cpost.post = post;\n            cpost.user_of_comments = users_of_comments;\n            cposts.push(cpost);\n          }\n          res(cposts);\n        })();\n      });\n    }\n    static getIfContains(inTitle) {\n      return new Promise((res, rej) => {\n        const all_posts = [];\n        let final_post = [];\n        Posts.getAll().then(data => {\n          data.forEach(post => {\n            if (post.title.toLowerCase().includes(inTitle.toLowerCase())) all_posts.push(post);\n          });\n        }).then( /*#__PURE__*/_asyncToGenerator(function* () {\n          final_post = yield Posts.getCPosts(all_posts);\n          res(final_post);\n        })).catch(() => rej([]));\n      });\n    }\n    static post(data) {\n      return new Promise((res, rej) => {\n        Posts.api_service.post(Posts.path, data).subscribe({\n          next: () => res('The data has been posted.'),\n          error: () => rej('Something went wrong when post the data.')\n        });\n      });\n    }\n    static put(id, data) {\n      return new Promise((res, rej) => {\n        Posts.api_service.put(Posts.path, id, data).subscribe({\n          next: () => res('The data has been updated.'),\n          error: () => rej('Something went wrong when update the data.')\n        });\n      });\n    }\n    static delete(id) {\n      return new Promise((res, rej) => {\n        Posts.api_service.delete(Posts.path, id).subscribe({\n          next: () => res('The data has been deleted.'),\n          error: () => rej('Something went wrong when delete the data.')\n        });\n      });\n    }\n  }\n  Posts.get_path = 'posts/get?';\n  Posts.path = 'posts';\n  return Posts;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
