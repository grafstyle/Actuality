{
  "ast": null,
  "code": "export let Comments = /*#__PURE__*/(() => {\n  class Comments {\n    static get(id) {\n      return new Promise((res, rej) => {\n        this.api_service.get(`${Comments.get_path}id=${id}`).subscribe({\n          next: e => res(e),\n          error: () => rej([])\n        });\n      });\n    }\n    static getAll() {\n      return new Promise((res, rej) => {\n        this.api_service.get(Comments.path).subscribe({\n          next: e => res(e),\n          error: () => rej([])\n        });\n      });\n    }\n    static getBy(key, data) {\n      return new Promise((res, rej) => {\n        Comments.api_service.get(`${Comments.get_path}${key}=${data}`).subscribe({\n          next: comment => res(comment),\n          error: () => rej([])\n        });\n      });\n    }\n    static getLastID() {\n      return new Promise((res, rej) => {\n        this.getAll().then(data => {\n          if (data.length == 0) res(0);\n          res(data[data.length - 1].id);\n        }).catch(() => {\n          rej(0);\n        });\n      });\n    }\n    static post(data) {\n      return new Promise((res, rej) => {\n        this.api_service.post(Comments.path, data).subscribe({\n          next: () => res('The data has been posted.'),\n          error: () => rej('Something went wrong when post the data.')\n        });\n      });\n    }\n    static put(id, data) {\n      return new Promise((res, rej) => {\n        this.api_service.put(Comments.path, id, data).subscribe({\n          next: () => res('The data has been updated.'),\n          error: () => rej('Something went wrong when update the data.')\n        });\n      });\n    }\n    static delete(id) {\n      return new Promise((res, rej) => {\n        this.api_service.delete(Comments.path, id).subscribe({\n          next: () => res('The data has been deleted.'),\n          error: () => rej('Something went wrong when delete the data.')\n        });\n      });\n    }\n  }\n  Comments.get_path = 'comments/get?';\n  Comments.path = 'comments';\n  return Comments;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
