{
  "ast": null,
  "code": "import _asyncToGenerator from \"C:/Users/pineapple/Documents/Actuality/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport let Users = /*#__PURE__*/(() => {\n  class Users {\n    static login() {\n      this.auth.loginWithRedirect();\n    }\n    static signup() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.auth.loginWithRedirect({\n          authorizationParams: {\n            screen_hint: 'signup'\n          }\n        });\n      })();\n    }\n    static logout() {\n      this.auth.logout();\n    }\n    static isActualUserAuth() {\n      return new Promise((res, rej) => {\n        Users.auth.isAuthenticated$.subscribe({\n          next: data => res(data),\n          error: () => rej('error')\n        });\n      });\n    }\n    static getByAuth() {\n      return new Promise((res, rej) => {\n        Users.auth.user$.subscribe({\n          next: data => res(data),\n          error: () => rej('error')\n        });\n      });\n    }\n    static getByEmail(email) {\n      return new Promise((res, rej) => {\n        this.getBy('email', email).then(data => {\n          if (data.length > 0) res(data[0]);\n          rej(\"Don't find the user.\");\n        });\n      });\n    }\n    static getIfContains(data_to_get) {\n      return new Promise((res, rej) => {\n        const final_user = [];\n        let other_lap = true;\n        Users.getAll().then(data => {\n          data.forEach(user => {\n            let key;\n            for (key in user) {\n              let keyGet;\n              for (keyGet in data_to_get) {\n                if (other_lap && key == keyGet && user[key].toLowerCase().includes(data_to_get[keyGet]?.toLowerCase())) {\n                  other_lap = false;\n                  final_user.push(user);\n                }\n              }\n            }\n            other_lap = true;\n          });\n        }).catch(() => rej([]));\n        res(final_user);\n      });\n    }\n    static getBy(key, data) {\n      return new Promise((res, rej) => {\n        Users.api_service.get(`${Users.get_path}${key}=${data}`).subscribe({\n          next: user => res(user),\n          error: () => rej([])\n        });\n      });\n    }\n    static getAll() {\n      return new Promise((res, rej) => {\n        Users.api_service.get(this.path).subscribe({\n          next: user => res(user),\n          error: () => rej('Something went wrong when get the user.')\n        });\n      });\n    }\n    static get(id) {\n      return new Promise((res, rej) => {\n        Users.api_service.get(`${Users.get_path}id=${id}`).subscribe({\n          next: user => res(user[0]),\n          error: () => rej('Something went wrong when get the user.')\n        });\n      });\n    }\n    static post(data) {\n      return new Promise((res, rej) => {\n        Users.api_service.post(this.path, data).subscribe({\n          next: () => res('The user has been uplodaded.'),\n          error: () => rej('Something went wrong when add the user.')\n        });\n      });\n    }\n    static put(data, id) {\n      return new Promise((res, rej) => {\n        Users.api_service.put(this.path, id, data).subscribe({\n          next: () => res('The user has been uplodaded.'),\n          error: () => rej('Something went wrong when add the user.')\n        });\n      });\n    }\n    static delete(id) {\n      return new Promise((res, rej) => {\n        Users.api_service.delete(this.path, id).subscribe({\n          next: () => res('The user has been uplodaded.'),\n          error: () => rej('Something went wrong when add the user.')\n        });\n      });\n    }\n  }\n  Users.path = 'users';\n  Users.get_path = 'users/get?';\n  return Users;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
