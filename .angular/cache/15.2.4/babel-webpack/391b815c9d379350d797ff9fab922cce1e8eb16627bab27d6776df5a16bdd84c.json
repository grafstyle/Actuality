{
  "ast": null,
  "code": "export let Likes = /*#__PURE__*/(() => {\n  class Likes {\n    static get(id) {\n      return new Promise((res, rej) => {\n        Likes.api_service.get(`${Likes.get_path}id=${id}`).subscribe({\n          next: likes => res(likes),\n          error: () => rej([])\n        });\n      });\n    }\n    static getAll() {\n      return new Promise((res, rej) => {\n        Likes.api_service.get(Likes.path).subscribe({\n          next: likes => res(likes),\n          error: () => rej([])\n        });\n      });\n    }\n    static getBy(key, data) {\n      return new Promise((res, rej) => {\n        Likes.api_service.get(`${Likes.get_path}${key}=${data}`).subscribe({\n          next: post => res(post),\n          error: () => rej([])\n        });\n      });\n    }\n    static getOf(id_post, id_user) {\n      return new Promise((res, rej) => {\n        Likes.api_service.get(`${Likes.get_path}id_post=${id_post}&id_user=${id_user}`).subscribe({\n          next: like => res(like),\n          error: () => rej([])\n        });\n      });\n    }\n    static post(data) {\n      return new Promise((res, rej) => {\n        Likes.api_service.post(Likes.path, data).subscribe({\n          next: () => res('The data has been posted.'),\n          error: () => rej('Something went wrong when post the data.')\n        });\n      });\n    }\n    static delete(id) {\n      return new Promise((res, rej) => {\n        Likes.api_service.delete(Likes.path, id).subscribe({\n          next: () => res('The data has been deleted.'),\n          error: () => rej('Something went wrong when delete the data.')\n        });\n      });\n    }\n  }\n  Likes.get_path = 'likes/get?';\n  Likes.path = 'likes';\n  return Likes;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
