{
  "ast": null,
  "code": "export class Tools {\n  getImage(file) {\n    return new Promise((res, rej) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => res(reader.result);\n      reader.onerror = err => rej(err);\n    });\n  }\n  getNameOfCloudinaryFile(url) {\n    const dirs = url.split('/');\n    return dirs[dirs.length - 1];\n  }\n  setCursorToLast(elem) {\n    const range = document.createRange();\n    const sel = window.getSelection();\n    range.setStart(elem.nativeElement, 1);\n    range.collapse(true);\n    sel?.removeAllRanges();\n    sel?.addRange(range);\n  }\n  getNameMail(email) {\n    return email.split('@')[0];\n  }\n  createURLName(name) {\n    return name.replace(' ', '_').toLowerCase();\n  }\n  format12Time(hour24) {\n    if (!hour24.includes(':')) throw EvalError('The time not include semicolon.');\n    const time_split = hour24.split(':');\n    const hour = parseInt(time_split[0]);\n    if (hour > 12) time_split[0] = (hour - 12).toString();else if (hour == 0) time_split[0] = '12';else time_split[0] = hour.toString();\n    return `${time_split[0]}:${time_split[1]}`;\n  }\n  getActualISODate() {\n    const date = new Date().toISOString();\n    return date;\n  }\n  getMonthOfNumber(numberStr) {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const month_number = parseInt(numberStr);\n    return months[month_number];\n  }\n  formatDate(date) {\n    const iso_date = date;\n    const splitted_c_date = this.dateToString(iso_date).split(' ');\n    const splitted_date = splitted_c_date[0].split('/');\n    const month_str = this.getMonthOfNumber(splitted_date[1]);\n    return `${month_str} ${splitted_date[0]}, ${splitted_date[2]} ${splitted_c_date[1]} ${splitted_c_date[2].toLowerCase()}`;\n  }\n  dateToString(dateStr) {\n    const date = new Date(dateStr);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    const conv_day = day < 10 ? `0${day}` : `${day}`;\n    const conv_month = month < 10 ? `0${month}` : `${month}`;\n    const only_date = `${conv_day}/${conv_month}/${year}`;\n    const hour = date.getHours();\n    const minutes = date.getMinutes();\n    const am_or_pm = hour >= 12 ? 'PM' : 'AM';\n    const conv_mins = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const final_hour = this.format12Time(`${hour}:${conv_mins} ${am_or_pm}`);\n    return `${only_date} ${final_hour}`;\n  }\n  acceptSomeFileBy(file, opts, ...someOpts) {\n    if (file != null) {\n      if (opts.length > 0 && opts.length > 0) opts = opts.concat(someOpts);\n      for (const opt of opts) if (file.type == opt) return true;\n    }\n    return false;\n  }\n  showComponent(element, height = '') {\n    element.style.opacity = '1';\n    element.style.pointerEvents = 'all';\n    if (height != '') element.style.height = height;\n  }\n  hideComponent(element, height = false) {\n    element.style.opacity = '0';\n    element.style.pointerEvents = 'none';\n    if (height) element.style.height = '0';\n  }\n}",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
